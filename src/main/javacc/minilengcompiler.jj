options
{
  static = true;
  ignore_case = true;
  common_token_action = true;
  debug_parser = false;
  java_unicode_escape = true;
}

PARSER_BEGIN(MiniLeng)
package com.minileng.generated;

import com.minileng.collections.FollowSets;
import com.minileng.collections.KindNameMapping;
import java.util.Set;
import com.minileng.collections.TokenFreq;
import com.minileng.exceptions.UnknownTokenException;
import com.minileng.semantic.Symbol;
import com.minileng.semantic.SymbolTable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class MiniLeng {
  private static final Logger LOG = LogManager.getLogger();

  public static String buildMessage(ParseException e) {
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < e.expectedTokenSequences.length; i++) {
      if (maxSize < e.expectedTokenSequences[i].length) {
        maxSize = e.expectedTokenSequences[i].length;
      }
      for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
        expected.append("<")
            .append(KindNameMapping.getInstance().name(e.expectedTokenSequences[i][j])).append(">")
            .append(", ");
      }
    }
    expected.delete(expected.length() - 2, expected.length());
    String retval = "Encontrado \"";
    Token tok = e.currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) {
        retval += " ";
      }
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += "<" + KindNameMapping.getInstance().name(tok.kind) + ">";
      retval += ":=";
      retval += ParseException.add_escapes(tok.image);
      retval += "\"";
      tok = tok.next;
    }
    retval += ". ";

    if (e.expectedTokenSequences.length == 0) {
      // Nothing to add here
    } else {
      if (e.expectedTokenSequences.length == 1) {
        retval += "Se esperaba: ";
      } else {
        retval += "Se esperaba uno de: ";
      }
      retval += expected.toString() + ".";
    }
    return retval;
  }

  public static void recoverParsingError(String nonterminal, ParseException e) {
    LOG.error("ERROR SINTÁCTICO({}, {}): {}", e.currentToken.next.beginLine,
      e.currentToken.next.beginColumn, buildMessage(e));
    Set<String> followSet = FollowSets.getFollowSet(nonterminal);
    int pos;
    for (pos = 0; !followSet.contains(KindNameMapping.getInstance().name(getToken(pos).kind)) ; ++pos);
    for (int i = 0; i < pos - 1; ++i) getNextToken();
  }
}

PARSER_END(MiniLeng)

TOKEN_MGR_DECLS :
{
  private static TokenFreq tokenFreq = new TokenFreq();

  public static TokenFreq getTokenFreq() {
    return tokenFreq;
  }

  static void CommonTokenAction(Token t) {
    tokenFreq.addOrInc(t.kind);
  }
}

SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\r\n"
  | < tCOMENTARIO: "%"(~["\n","\r"])*("\n"|"\r"|"\r\n") >
}

// Data types
TOKEN :
{
  < tENTERO : "entero" >
  | < tBOOLEANO : "booleano" >
  | < tCARACTER : "caracter" >
}

// Arithmetic operators
TOKEN :
{
  < tMAS : "+" >
  | < tMENOS : "-" >
  | < tMUL : "*" >
  | < tDIVCHAR : "/" >
  | < tDIV : "div" >
  | < tMOD : "mod" >
}

// Asignment operators
TOKEN :
{
  < tOPAS : ":=" >
}

// Relational operators
TOKEN :
{
  < tMAYOR : ">" >
  | < tMENOR : "<" >
  | < tIGUAL : "=" >
  | < tMAI : ">=" >
  | < tMEI : "<=" >
  | < tNI : "<>" >
}

// Logical operators
TOKEN :
{
  < tAND : "and" >
  | < tOR : "or" >
  | < tNOT : "not" >
}

// Casting operators
TOKEN :
{
  < tENTACAR : "entacar" >
  | < tCARAENT : "caraent" >
}

// Conditional structures
TOKEN :
{
  < tSI : "si" >
  | < tENT : "ent" >
  | < tSI_NO : "si_no" >
  | < tFSI : "fsi" >
  | < tMQ : "mq" >
  | < tFMQ : "fmq" >
}

// IO
TOKEN :
{
  < tESCRIBIR : "escribir" >
  | < tLEER : "leer" >
}

// Procedure related tokens
TOKEN :
{
  < tVAL : "val" >
  | < tREF : "ref" >
  | < tACCION : "accion" >
  | < tPRINCIPIO : "principio" >
  | < tFIN : "fin" >
}

// Constants
TOKEN :
{
  < tTRUE : "true" >
  | < tFALSE : "false" >
  | < tKENTERO : (["0"-"9"])+ >
  | < tKCARACTER: "\""(~["\n","\r"])"\"" >
  | < tKCADENA: "\""(~["\n","\r","\""])(~["\n","\r","\""])+"\"" >
  | < tPUNTOCOMA : ";" >
  | < tCOMA : "," >
  | < tPAR_DCHA : ")" >
  | < tPAR_IZQ : "(" >
}

// Program
TOKEN :
{
  < tPROGRAMA : "programa" >
  | < tID : (["a"-"z"]) | (["a"-"z","_"](["a"-"z","0"-"9","_"])*(["a"-"z","0"-"9"])+) >
}

// Error
TOKEN :
{
  < tERROR : ~[] >
  {
    if (true) {
      throw new UnknownTokenException(
          "ERROR LÉXICO (" + matchedToken.beginLine + ", " + matchedToken.beginColumn
              + "): símbolo no reconocido: " + image);
    }
  }
}

void programa() :
{
  Token tProgram;
}

{
  try {
    tProgram = <tPROGRAMA>
    {
      SymbolTable.getInstance().putProgram(tProgram.image);
    }
    <tID> <tPUNTOCOMA> declaracion_variables() declaracion_acciones() bloque_sentencias()
  } catch (UnknownTokenException e) {
    LOG.error(e.getMessage());
  } catch (ParseException e) {
    recoverParsingError("programa", e);
  }
}

void declaracion_variables() :
{
}

{
  try {
    declaracion() <tPUNTOCOMA> declaracion_variables() | {}
  } catch (ParseException e) {
    recoverParsingError("declaracion_variables", e);
  }
}

void declaracion() :
{
}

{
  try {
    tipo_variables() identificadores()
  } catch (ParseException e) {
    recoverParsingError("declaracion", e);
  }
}

void tipo_variables() :
{
}

{
  try {
    <tENTERO> | <tCARACTER> | <tBOOLEANO>
  } catch (ParseException e) {
    recoverParsingError("tipo_variables", e);
  }
}

void identificadores() :
{
}

{
  try {
    <tID> repeticion_identificadores()
  } catch (ParseException e) {
    recoverParsingError("identificadores", e);
  }
}

void repeticion_identificadores() :
{
}

{
  try {
    <tCOMA> <tID> repeticion_identificadores() | {}
  } catch (ParseException e) {
    recoverParsingError("repeticion_identificadores", e);
  }
}

void declaracion_acciones() :
{
}

{
  try {
    declaracion_accion() declaracion_acciones() | {}
  } catch (ParseException e) {
    recoverParsingError("declaracion_acciones", e);
  }
}

void declaracion_accion() :
{
}

{
  try {
    cabecera_accion() <tPUNTOCOMA> declaracion_variables() declaracion_acciones() bloque_sentencias()
  } catch (ParseException e) {
    recoverParsingError("declaracion_accion", e);
  }
}

void cabecera_accion() :
{
}

{
  try {
    <tACCION> <tID> parametros_formales()
  } catch (ParseException e) {
    recoverParsingError("cabecera_accion", e);
  }
}

void parametros_formales() :
{
}

{
  try {
    <tPAR_IZQ> lista_parametros() <tPAR_DCHA> | {}
  } catch (ParseException e) {
    recoverParsingError("parametros_formales", e);
  }
}

void lista_parametros() :
{
}

{
  try {
    parametro() repeticion_parametro() | {}
  } catch (ParseException e) {
    recoverParsingError("lista_parametros", e);
  }
}

void parametro() :
{
}

{
  try {
    clase_parametros() tipo_variables() identificadores()
  } catch (ParseException e) {
    recoverParsingError("parametro", e);
  }
}

void repeticion_parametro() :
{
}

{
  try {
    <tPUNTOCOMA> parametro() repeticion_parametro() | {}
  } catch (ParseException e) {
    recoverParsingError("repeticion_parametro", e);
  }
}

void clase_parametros() :
{
}

{
  try {
    <tVAL> | <tREF>
  } catch (ParseException e) {
    recoverParsingError("clase_parametros", e);
  }
}

void bloque_sentencias() :
{
}

{
  try {
    <tPRINCIPIO> lista_sentencias() <tFIN>
  } catch (ParseException e) {
    recoverParsingError("bloque_sentencias", e);
  }
}

void lista_sentencias() :
{
}

{
  try {
    sentencia() lista_sentencias() | {}
  } catch (ParseException e) {
    recoverParsingError("lista_sentencias", e);
  }
}

void sentencia() :
{
}

{
  try {
    leer() <tPUNTOCOMA> | escribir() <tPUNTOCOMA> | asignacion_invocacion() | seleccion() | mientras_que()
  } catch (ParseException e) {
    recoverParsingError("sentencia", e);
  }
}

void leer() :
{
}

{
  try {
    <tLEER> <tPAR_IZQ> identificadores() <tPAR_DCHA>
  } catch (ParseException e) {
    recoverParsingError("leer", e);
  }
}

void escribir() :
{
}

{
  try {
    <tESCRIBIR> <tPAR_IZQ> lista_argumentos_no_vacia() <tPAR_DCHA>
  } catch (ParseException e) {
    recoverParsingError("escribir", e);
  }
}

void asignacion_invocacion() :
{
}

{
  try {
    <tID> asignacion_invocacion_()
  } catch (ParseException e) {
    recoverParsingError("asignacion_invocacion", e);
  }
}

void asignacion_invocacion_() :
{
}

{
  try {
    asignacion() | invocacion_accion()
  } catch (ParseException e) {
    recoverParsingError("asignacion_invocacion_", e);
  }
}

void asignacion() :
{
}

{
  try {
    <tOPAS> argumento() <tPUNTOCOMA>
  } catch (ParseException e) {
    recoverParsingError("asignacion", e);
  }
}

void invocacion_accion() :
{
}

{
  try {
    argumentos_accion() <tPUNTOCOMA>
  } catch (ParseException e) {
    recoverParsingError("invocacion_accion", e);
  }
}

void mientras_que() :
{
}

{
  try {
    <tMQ> expresion_bool() lista_sentencias() <tFMQ>
  } catch (ParseException e) {
    recoverParsingError("mientras_que", e);
  }
}

void seleccion() :
{
}

{
  try {
    <tSI> seleccion_()
  } catch (ParseException e) {
    recoverParsingError("seleccion", e);
  }
}

void argumentos_accion() :
{
}

{
  try {
    <tPAR_IZQ> lista_argumentos_vacia() <tPAR_DCHA> | {}
  } catch (ParseException e) {
    recoverParsingError("argumentos_accion", e);
  }
}

void argumento() :
{
}

{
  try {
    <tKCADENA> | entacar() | expresion_bool()
  } catch (ParseException e) {
    recoverParsingError("argumento", e);
  }
}

void lista_argumentos_vacia() :
{
}

{
  try {
    <tKCADENA> repeticion_argumentos() | entacar() repeticion_argumentos() | expresion_bool() repeticion_argumentos()  | {}
  } catch (ParseException e) {
    recoverParsingError("lista_argumentos_vacia", e);
  }
}

void lista_argumentos_no_vacia() :
{
}

{
  try {
    <tKCADENA> repeticion_argumentos() | entacar() repeticion_argumentos() | expresion_bool() repeticion_argumentos()
  } catch (ParseException e) {
    recoverParsingError("lista_argumentos_no_vacia", e);
  }
}

void repeticion_argumentos() :
{
}

{
  try {
    <tCOMA> argumento() repeticion_argumentos() | {}
  } catch (ParseException e) {
    recoverParsingError("repeticion_argumentos", e);
  }
}

void operador_relacional() :
{
}

{
  try {
    <tMAYOR> | <tMENOR> | <tIGUAL> | <tMAI> | <tMEI> | <tNI>
  } catch (ParseException e) {
    recoverParsingError("operador_relacional", e);
  }
}

void caraent() :
{
}

{
  try {
    <tCARAENT> caraent_()
  } catch (ParseException e) {
    recoverParsingError("caraent", e);
  }
}

void entacar() :
{
}

{
  try {
    <tENTACAR> <tPAR_IZQ> expresion_bool() <tPAR_DCHA>
  } catch (ParseException e) {
    recoverParsingError("entacar", e);
  }
}

void expresion_bool() :
{
}

{
  try {
    term_bool() expresion_bool_()
  } catch (ParseException e) {
    recoverParsingError("expresion_bool", e);
  }
}

void term_bool() :
{
}

{
  try {
    factor_bool_unario() term_bool_()
  } catch (ParseException e) {
    recoverParsingError("term_bool", e);
  }
}

void factor_bool_unario() :
{
}

{
  try {
    <tNOT> factor_bool() | factor_bool()
  } catch (ParseException e) {
    recoverParsingError("factor_bool_unario", e);
  }
}

void factor_bool() :
{
}

{
  try {
    <tFALSE> | <tTRUE> | relacion()
  } catch (ParseException e) {
    recoverParsingError("factor_bool", e);
  }
}

void relacion() :
{
}

{
  try {
    expresion_arit() relacion_()
  } catch (ParseException e) {
    recoverParsingError("relacion", e);
  }
}

void expresion_arit() :
{
}

{
  try {
    term_arit() expresion_arit_()
  } catch (ParseException e) {
    recoverParsingError("expresion_arit", e);
  }
}

void term_arit() :
{
}

{
  try {
    factor_arit_unario() term_arit_()
  } catch (ParseException e) {
    recoverParsingError("term_arit", e);
  }
}

void factor_arit_unario() :
{
}

{
  try {
    <tMAS> factor_arit() | <tMENOS> factor_arit() | factor_arit()
  } catch (ParseException e) {
    recoverParsingError("factor_arit_unario", e);
  }
}

void factor_arit() :
{
}

{
  try {
    <tKENTERO> | <tID> | <tKCARACTER> | <tPAR_IZQ> expresion_bool() <tPAR_DCHA> | <tCARAENT> factor_arit_()
  } catch (ParseException e) {
    recoverParsingError("factor_arit", e);
  }
}

void expresion_bool_() :
{
}

{
  try {
    <tOR> term_bool() expresion_bool_() | {}
  } catch (ParseException e) {
    recoverParsingError("expresion_bool_", e);
  }
}

void term_bool_() :
{
}

{
  try {
    <tAND> factor_bool_unario() term_bool_() | {}
  } catch (ParseException e) {
    recoverParsingError("term_bool_", e);
  }
}

void expresion_arit_() :
{
}

{
  try {
    <tMAS> term_arit() expresion_arit_() | <tMENOS> term_arit() expresion_arit_() | {}
  } catch (ParseException e) {
    recoverParsingError("expresion_arit_", e);
  }
}

void term_arit_() :
{
}

{
  try {
    <tMUL> factor_arit_unario() term_arit_() | <tDIV> factor_arit_unario() term_arit_() | <tDIVCHAR> factor_arit_unario() term_arit_() | <tMOD> factor_arit_unario() term_arit_() | {}
  } catch (ParseException e) {
    recoverParsingError("term_arit_", e);
  }
}

void seleccion_() :
{
}

{
  try {
    expresion_bool() seleccion__()
  } catch (ParseException e) {
    recoverParsingError("seleccion_", e);
  }
}

void caraent_() :
{
}

{
  try {
    <tPAR_IZQ> caraent__()
  } catch (ParseException e) {
    recoverParsingError("caraent_", e);
  }
}

void relacion_() :
{
}

{
  try {
    operador_relacional() expresion_arit() | {}
  } catch (ParseException e) {
    recoverParsingError("relacion_", e);
  }
}

void factor_arit_() :
{
}

{
  try {
    <tPAR_IZQ> factor_arit__()
  } catch (ParseException e) {
    recoverParsingError("factor_arit_", e);
  }
}

void seleccion__() :
{
}

{
  try {
    <tENT> seleccion___()
  } catch (ParseException e) {
    recoverParsingError("seleccion__", e);
  }
}

void caraent__() :
{
}

{
  try {
    <tKCARACTER> <tPAR_DCHA> | entacar() <tPAR_DCHA> | <tID> <tPAR_DCHA>
  } catch (ParseException e) {
    recoverParsingError("caraent__", e);
  }
}

void factor_arit__() :
{
}

{
  try {
    <tKCARACTER> <tPAR_DCHA> | entacar() <tPAR_DCHA> | <tID> <tPAR_DCHA>
  } catch (ParseException e) {
    recoverParsingError("factor_arit__", e);
  }
}

void seleccion___() :
{
}

{
  try {
    lista_sentencias() seleccion____()
  } catch (ParseException e) {
    recoverParsingError("seleccion___", e);
  }
}

void seleccion____() :
{
}

{
  try {
    <tFSI> | <tSI_NO> lista_sentencias() <tFSI>
  } catch (ParseException e) {
    recoverParsingError("seleccion____", e);
  }
}